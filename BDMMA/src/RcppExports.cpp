// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// DM
NumericVector DM(arma::mat Y, arma::mat alpha);
RcppExport SEXP _BDMMAcorrect_DM(SEXP YSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(DM(Y, alpha));
    return rcpp_result_gen;
END_RCPP
}
// DM_diff
double DM_diff(arma::mat Y, arma::mat alpha1, arma::mat alpha2, int g);
RcppExport SEXP _BDMMAcorrect_DM_diff(SEXP YSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< int >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(DM_diff(Y, alpha1, alpha2, g));
    return rcpp_result_gen;
END_RCPP
}
// update_alpha2
arma::mat update_alpha2(arma::rowvec alpha, arma::mat alpha_m, arma::mat x, arma::mat y, arma::mat beta, int T, double lambda, arma::vec prop, arma::mat delta_m);
RcppExport SEXP _BDMMAcorrect_update_alpha2(SEXP alphaSEXP, SEXP alpha_mSEXP, SEXP xSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP TSEXP, SEXP lambdaSEXP, SEXP propSEXP, SEXP delta_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_m(alpha_mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prop(propSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta_m(delta_mSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha2(alpha, alpha_m, x, y, beta, T, lambda, prop, delta_m));
    return rcpp_result_gen;
END_RCPP
}
// update_beta1
arma::mat update_beta1(arma::mat alpha_m, arma::mat x, arma::mat y, arma::mat beta, int T, arma::vec L, double sigma1, double eta, arma::mat delta_m);
RcppExport SEXP _BDMMAcorrect_update_beta1(SEXP alpha_mSEXP, SEXP xSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP TSEXP, SEXP LSEXP, SEXP sigma1SEXP, SEXP etaSEXP, SEXP delta_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type alpha_m(alpha_mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta_m(delta_mSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta1(alpha_m, x, y, beta, T, L, sigma1, eta, delta_m));
    return rcpp_result_gen;
END_RCPP
}
// update_beta
arma::mat update_beta(arma::mat alpha_m, arma::mat x, arma::mat y, arma::mat beta, int T, int K, double sigma2, arma::mat delta_m);
RcppExport SEXP _BDMMAcorrect_update_beta(SEXP alpha_mSEXP, SEXP xSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP TSEXP, SEXP KSEXP, SEXP sigma2SEXP, SEXP delta_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type alpha_m(alpha_mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta_m(delta_mSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta(alpha_m, x, y, beta, T, K, sigma2, delta_m));
    return rcpp_result_gen;
END_RCPP
}
// update_delta
arma::mat update_delta(arma::mat alpha_m, arma::mat x, arma::mat y, arma::mat delta, arma::mat delta_m, arma::mat beta, arma::mat e_delta, arma::vec batch, int N, int T, int I, double sigma3, arma::rowvec weight);
RcppExport SEXP _BDMMAcorrect_update_delta(SEXP alpha_mSEXP, SEXP xSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP delta_mSEXP, SEXP betaSEXP, SEXP e_deltaSEXP, SEXP batchSEXP, SEXP NSEXP, SEXP TSEXP, SEXP ISEXP, SEXP sigma3SEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type alpha_m(alpha_mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta_m(delta_mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e_delta(e_deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< double >::type sigma3(sigma3SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(update_delta(alpha_m, x, y, delta, delta_m, beta, e_delta, batch, N, T, I, sigma3, weight));
    return rcpp_result_gen;
END_RCPP
}
// Mat_To_Rowvec
arma::rowvec Mat_To_Rowvec(arma::mat m);
RcppExport SEXP _BDMMAcorrect_Mat_To_Rowvec(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(Mat_To_Rowvec(m));
    return rcpp_result_gen;
END_RCPP
}
// MCMC
arma::mat MCMC(arma::rowvec alpha, arma::mat alpha_m, arma::mat x, arma::mat y, arma::mat beta, arma::mat delta, arma::mat delta_m, arma::mat e_delta, int T, int N, int K, int I, double lambda, arma::vec prop, arma::vec L, double sigma1, double sigma2, double sigma3, int iter, double eta, double a, double b, double p, arma::vec batch, arma::rowvec weight);
RcppExport SEXP _BDMMAcorrect_MCMC(SEXP alphaSEXP, SEXP alpha_mSEXP, SEXP xSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP delta_mSEXP, SEXP e_deltaSEXP, SEXP TSEXP, SEXP NSEXP, SEXP KSEXP, SEXP ISEXP, SEXP lambdaSEXP, SEXP propSEXP, SEXP LSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP sigma3SEXP, SEXP iterSEXP, SEXP etaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP pSEXP, SEXP batchSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_m(alpha_mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta_m(delta_mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type e_delta(e_deltaSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prop(propSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma3(sigma3SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC(alpha, alpha_m, x, y, beta, delta, delta_m, e_delta, T, N, K, I, lambda, prop, L, sigma1, sigma2, sigma3, iter, eta, a, b, p, batch, weight));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BDMMAcorrect_DM", (DL_FUNC) &_BDMMAcorrect_DM, 2},
    {"_BDMMAcorrect_DM_diff", (DL_FUNC) &_BDMMAcorrect_DM_diff, 4},
    {"_BDMMAcorrect_update_alpha2", (DL_FUNC) &_BDMMAcorrect_update_alpha2, 9},
    {"_BDMMAcorrect_update_beta1", (DL_FUNC) &_BDMMAcorrect_update_beta1, 9},
    {"_BDMMAcorrect_update_beta", (DL_FUNC) &_BDMMAcorrect_update_beta, 8},
    {"_BDMMAcorrect_update_delta", (DL_FUNC) &_BDMMAcorrect_update_delta, 13},
    {"_BDMMAcorrect_Mat_To_Rowvec", (DL_FUNC) &_BDMMAcorrect_Mat_To_Rowvec, 1},
    {"_BDMMAcorrect_MCMC", (DL_FUNC) &_BDMMAcorrect_MCMC, 25},
    {NULL, NULL, 0}
};

RcppExport void R_init_BDMMAcorrect(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
